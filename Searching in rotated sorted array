int searchpivot(vector<int>& arr, int n){
    int s = 0;
    int e = n-1;
    int mid = s+ (e-s)/2;

    while(e>s){
        if(arr[mid] >= arr[0] ){
            //right jaao
            s = mid+1;
        }
        else{
            //left jaao
            e= mid;
        }
        mid= s+(e-s)/2;
    }
    return s;
}
int binarySearch(vector<int>& arr, int s, int e , int k){
    int mid = s+ (e-s)/2;
    while(s<=e){
        if(arr[mid] == k){
            return mid;
        }
        else if(arr[mid] > k){
            //go to left wala part
            e = mid-1;
        }
        else{
            // go to right wala part
            s = mid+1;
        }
        mid = s+ (e-s)/2;
    }
    return -1;
}
int search(vector<int>& arr, int n, int k)
{
   int pivot_index = searchpivot(arr , n);
   //printf("pivot_index is : %d" , pivot_index);

   int ans = -1 ;
   if(k >= arr[0] && k <= arr[pivot_index-1]){
       ans =binarySearch(arr , 0 , pivot_index-1 , k);
   }
   else if (k <= arr[n-1] && k >= arr[pivot_index]){
       ans = binarySearch(arr ,pivot_index ,  n-1 , k);
   }

   return ans;
}
