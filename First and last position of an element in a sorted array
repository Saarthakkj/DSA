int firstPosition(vector<int>& arr, int n, int key){
    int start =  0;
    int end = n-1;
    int mid = start+ (end-start)/2;

    //printf("start , end , mid : %d %d %d" , start, end , mid);

    while(start <= end){
        //printf("mid : %d" , mid);
        if(arr[mid]< key){
            start = mid+1;
        }
        else if(arr[mid] > key){
            end = mid-1;
        }
        else if(arr[mid] == key){
            //printf("executed");
            if(mid ==0 || arr[mid] != arr[mid-1]){
                return mid;
            }
            else{
                end = mid-1;
            }
        }
        mid = start + (end - start)/2;
    }
    return -1;
}
int lastPosition(vector<int>& arr, int n, int key){
    int start =  0;
    int end = n-1;
    int mid = start+ (end-start)/2;

    while(start <= end){
        //printf("executed 2");
        if(arr[mid]< key){
            start = mid+1;
        }
        else if(arr[mid] > key){
            end = mid-1;
        }
        else if(arr[mid] == key){
            if(mid==n-1 || arr[mid] != arr[mid+1]){
                return mid;
            }
            else{
                start = mid+1;
            }
        }
        mid = start + (end - start)/2;
    }
    return -1;
}
pair<int, int> firstAndLastPosition(vector<int>& arr, int n, int k)
{
    pair<int ,int> ans;
    ans.first = firstPosition(arr , n , k);
    ans.second = lastPosition(arr , n ,k);
    return ans;
    
}
