// in important algo's file: 
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int max =  INT_MIN;
        //int temp_sum = 0 ;
        // for(int i =0 ; i<nums.size(); i++){
            // temp_sum = nums[i];
            // if(max < temp_sum)
            // {
            //     max= temp_sum;
            // }
            // for(int j = i+1; j < nums.size() ; j++){
            //     temp_sum += nums[j];
            //     if(max < temp_sum){
            //         //cout<< "max and temp_sum : "<< max << temp_sum<< endl;
            //         max= temp_sum;
            //     }
            // }

            //new logic:
            //cout<<"nums[i]: "<< nums[i]<< endl;
            // vector<int>::iterator maxi = max_element(nums.begin()+i+1, nums.end());
            // int temp_sum2;
            // for(auto it= nums.begin() +i+1 ; it<maxi ; it++ ){
            //     cout<< "it: "<<*it << " maxi: "<<*maxi<< endl;
            //     temp_sum2 += *it;
            // }
            // if(!(temp_sum2 < -*maxi)){
            //     max = nums[i] + temp_sum2+*maxi;
            // }


            //new logic: 
        //     int temp = nums[i];
        //     for(int j = nums.size()-1; j>= i; j--){
        //         int cost = accumulate(nums.begin() +i+1, nums.begin() +j+1,0);
        //         //cout<< "i is : "<< i << " j is : "<< j << "cost is : "<< cost<< endl;
        //         if(cost>0){
        //            // cout<<  "b4 temp is : " << temp << endl;
        //             temp+=(cost);
        //             //cout<<  "temp is : " << temp << endl;
        //         }
        //         if(max <temp){
        //             max = temp;
        //             //cout<< "max is :" << max << endl;
        //         }
        //         temp = nums[i];
        //         // if(max < temp){
                    
        //         // }
        //     }

        // }

        // //handling edge case alone: 
        // if(nums.size() ==1){
        //     return nums[0];
        // }


        //kadane's algo:
        int maxi = INT_MIN;
        int sum =0 ;
        for(auto it: nums){
            sum+=it;
            if(sum > maxi){
                maxi = sum;
            }
            if(sum<0) sum =0;
        }
        return maxi;
    }
};
