//edited and optimised code:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        //rabbit- hare algorithm

        //first find out the mid of linkedlist
        ListNode* slow = head;
        ListNode* fast = head;
        while(fast!=  NULL and fast-> next != NULL){
            slow= slow-> next;
            fast = (fast-> next)->next;
        }

        //now slow is in the mid of the linkedlist
        ListNode* prev = NULL;
        ListNode* curr = slow;
        //pointing curr to the mid of the linkedlist
        //now reversing the second half of the linkedlist
        while(curr!= NULL){
            //store the next value in the temp
            ListNode* temp = curr-> next;
            //the next of current node should point to prev node
            curr-> next = prev;
            //now move the prev node to the current node
            prev = curr;
            //now update current node to move forward in the linkedlist
            curr = temp;
        }
        
        //now the second half of the linkedlist is reversed
        //checking if hte palindrome exists or not
        ListNode* pt1 = head;
        ListNode* pt2 = prev;
        //cant initialise to curr as its NULL
        while(pt2 != NULL){
            if(pt1-> val != pt2-> val){
                return false;
            }
            pt1 = pt1-> next;
            pt2 = pt2-> next;
        }
        //if passed, its palindrome
        return true;
    }
};
