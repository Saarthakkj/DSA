class Solution {
public:
    bool check(vector < vector < char >> & board, int row, int col, char c) {
        for (int i = 0; i < 9; i++) {
            if (board[i][col] == c)
                return false;

            if (board[row][i] == c)
                return false;

            if (board[3 * (row / 3) + i / 3][3 * (col / 3) + i % 3] == c)
                return false;
        }
        return true;
        }
    bool func(vector<vector<char>>& board ) {
        //cout<< "exe";
        for(int i = 0 ; i <9 ; i++){
            for(int j = 0 ; j< 9 ; j++){

                if(board[i][j] == '.') {
                    //cout<< "exe1";
                    for(char k = '1' ; k<='9' ; k++){
                        //cout<< "exe2";
                        if(check(board , i , j , k)){
                            board[i][j] = k;
                            if(func(board)){
                                return true;
                            }
                            else{
                                board[i][j] = '.';
                            }
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }
    void solveSudoku(vector<vector<char>>& board) {
        func(board);
        return ;
    }
};
