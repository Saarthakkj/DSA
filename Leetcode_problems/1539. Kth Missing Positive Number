//gotta find a O(logn) tc of this
//using binarysearch
class Solution {
public:
    int findKthPositive(vector<int>& arr, int k) {
        int diff = 0;
        int ans ; 

        //if arr's elements are 1 , 3 ,... then "2" is the 
        // skipped, so no. of skipped so far is "1"
        
        // if(arr[0]!= 1)
        // {
        //     diff = arr[0] -1;
        //     if(arr.size() ==1){
        //         return ans;
        //     }
        //     ans = diff;
        //     if(diff>= k){
        //         return ans;
        //     }
        // }      

        //for not arr/size() ==1
        for(int i = 0 ; i< arr.size(); i++){
            if(i ==0){
                if(arr[0]!= 1)
                {
                    diff = arr[0] -1;
                    ans = diff;
                    if(diff >= k){
                        return k;
                    }
                } 
            }
            //cout<< "in";
            else if(arr[i] - arr[i-1] != 1){
                diff+= (arr[i] - arr[i-1] -1);
                //cout<< "diff is : "<< diff<< endl;
                int temp_diff = arr[i] - arr[i-1]-1;
                if(diff >= k){
                    int diff2 = diff - k; // if diff is greater than k 
                    //cout<< "arr[i] " << arr[i] << "temp_diff : "<< temp_diff << "diff2: " << diff2 << endl;
                    
                    ans =  arr[i-1] + temp_diff - diff2;
                    return ans;
                }
            }
        }
        //loop done
        ans = arr[arr.size()-1] + (k-diff);

        return ans;
    }
};
