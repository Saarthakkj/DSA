/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        if(head == NULL){
            return false;
        }
        ListNode *slow = head;
        if(slow-> next == NULL){
            return false;
        }
        ListNode *fast = slow->next;
        //cout<< " fast value :" << fast-> val << endl;
        while(slow != fast){
            //cout<< "slow is: "<< slow-> val ;
            if(fast== NULL ||  (fast->next) == NULL ){
                //cout<< " this is executed for fast : "<< fast-> val << endl;
                return false;
            }
            slow = slow-> next;
            fast = (fast->next)-> next;
        }

        return true;
    };
};
